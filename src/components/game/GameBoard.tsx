import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport Tile from './Tile';\nimport { useGameStore } from '../../services/gameStore';\nimport { LetterState } from '../../types';\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nexport default function GameBoard() {\n  const { \n    guesses, \n    currentGuess, \n    wordLength, \n    maxAttempts,\n    gameStatus \n  } = useGameStore();\n  \n  // Calculate tile size based on screen width and word length\n  const padding = 40;\n  const spacing = 4; // 2px margin on each side\n  const availableWidth = screenWidth - padding;\n  const tileSize = Math.min(\n    (availableWidth - (wordLength - 1) * spacing) / wordLength,\n    60\n  );\n  \n  // Create rows for the game board\n  const rows = [];\n  \n  // Add completed guesses\n  for (let i = 0; i < guesses.length; i++) {\n    const guess = guesses[i];\n    const row = [];\n    \n    for (let j = 0; j < wordLength; j++) {\n      row.push(\n        <Tile\n          key={`${i}-${j}`}\n          letter={guess.word[j]}\n          state={guess.states[j]}\n          size={tileSize}\n        />\n      );\n    }\n    \n    rows.push(\n      <View key={`row-${i}`} style={styles.row}>\n        {row}\n      </View>\n    );\n  }\n  \n  // Add current guess row (if game is still playing)\n  if (gameStatus === 'playing' && guesses.length < maxAttempts) {\n    const currentRow = [];\n    \n    for (let j = 0; j < wordLength; j++) {\n      const letter = currentGuess[j] || '';\n      currentRow.push(\n        <Tile\n          key={`current-${j}`}\n          letter={letter}\n          state=\"empty\"\n          size={tileSize}\n        />\n      );\n    }\n    \n    rows.push(\n      <View key=\"current-row\" style={styles.row}>\n        {currentRow}\n      </View>\n    );\n  }\n  \n  // Add empty rows to fill the board\n  const remainingRows = maxAttempts - rows.length;\n  for (let i = 0; i < remainingRows; i++) {\n    const emptyRow = [];\n    \n    for (let j = 0; j < wordLength; j++) {\n      emptyRow.push(\n        <Tile\n          key={`empty-${i}-${j}`}\n          state=\"empty\"\n          size={tileSize}\n        />\n      );\n    }\n    \n    rows.push(\n      <View key={`empty-row-${i}`} style={styles.row}>\n        {emptyRow}\n      </View>\n    );\n  }\n  \n  return (\n    <View style={styles.container}>\n      {rows}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 20,\n  },\n  row: {\n    flexDirection: 'row',\n    marginBottom: 4,\n  },\n});\n"